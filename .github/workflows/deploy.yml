name: Azure Continuous Delivery

on:
  workflow_dispatch:
    inputs:
      IMAGE_REPOSITORY:
        description: "Repository of the image (same as declared in App Service creation)"
        required: true
        default: "api-vise"
      IMAGE_TAG:
        description: "Tag of the image"
        required: true
        default: "latest"
      AZURE_WEBAPP_NAME:
        description: "Nombre del App Service creado en Azure"
        required: true
      PORT:
        description: "Port of the application"
        required: true
        default: "443"

env:
  # Nombre del servidor de login de ACR: <ACR_NAME>.azurecr.io
  ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  # URL completa de la imagen que construiremos y usaremos para desplegar
  IMAGE_URL: ${{ secrets.ACR_NAME }}.azurecr.io/${{ inputs.IMAGE_REPOSITORY }}:${{ inputs.IMAGE_TAG }}

jobs:
  build-and-push-image:
    name: Build and Push to ACR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Login (ACR)
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_NAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push to ACR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE_URL }}

  deploy:
    name: Deploy remote container to Azure
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Deploy to Azure Web App for Containers
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_FELIPEPACHON }}
          images: ${{ env.IMAGE_URL }}

  test-deploy:
    name: Test deployed service
    runs-on: ubuntu-latest
    needs: [build-and-push-image, deploy]

    steps:
      - name: Checkout session.hurl
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            session.hurl
          sparse-checkout-cone-mode: false

      - name: Setup hurl (API testing tool)
        uses: gacts/install-hurl@v1

      - name: Test API
        run: |
          hurl \
            --variable host="https://${{ inputs.AZURE_WEBAPP_NAME }}.azurewebsites.net:${{ inputs.PORT }}" \
            --connect-timeout 20s \
            --error-format long \
            --verbose \
            --test session.hurl
